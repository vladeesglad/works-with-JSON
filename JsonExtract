public class jsonExtract {
  
    //  2016 Gregory Woods
    
    //  CLASS IS DESIGNED TO PERMIT USE OF CLASS METHODS TO ALLOW TRAVERSAL OF A SERIALIZED RECORD
    //  INSTANTIATE THE CLASS, SET THE sOBJECT PROPERTY AND THE RECORD PROPERTY (RECORD IS A JSON STRING)
    //  THEN CALL 'GETFROMJSON()' PROVIDING THE FIELD APINAME AS AN ARGUMENT
    //  CLASS PERMITS DYNAMIC DATA RETRIEVAL FROM sOBJECT RECORDS....
    //  PRIOR TO INTRODUCTION OF sOBJECT METHOD getPopulatedFieldsAsAMap()
    //  THIS WAS HOW I ACCOMPLISHED DYNAMIC DATA RETRIEVAL...
    //  OF COURSE, YOU COULD ALSO ROLL YOUR OWN MAP METHOD
    //  I PREFERRED THIS METHOD BECAUSE A JSON STRING IS EASILY SAVEABLE AS A GLOBAL STATIC STRING THAT CAN
    //  BE CALLED EASILY FROM ANY POINT IN THE EXECUTION CONTEXT....
    
    //  I STILL USE THE CLASS TO HANDLE DYNAMIC INTERRACTION WITH UNTYPED sOBJECTS

    private static Map<String, Schema.SObjectField> FsMap {get; private set;}
    
    private static map <string, boolean> DblQts = new map <string, boolean>();
    
    public string objname {
        get { return objname;}
        public set {objname = value;}
    }
    
    
    public string jsonstring {
        get { return jsonstring;}
        public set {jsonstring = value;}
    }
        
    
    public string getFromJson(string apiname, string objname, string jsonstring) {
        string fldval = '';
        return fldval;
    }

    public string getFromJson(string apiname) {
        
        //	LAZY LOAD DBLQTS...
        
        if (dblQts.isempty()) {
            dblqts = getAllFieldsJsonProcess(objname);
        }
        
        system.debug('jsonE... ' + objname + '.' + apiname);
        
        for (string k : dblqts.keyset()) {
            
            system.debug('jsonE... ' + k);
            system.debug('jsonE... ' + dblqts.get(k));
        }

        string fldval = '';
        
        apiname = apiname.trim();
        objname = objname.trim();
        
        boolean notlast = false;
        boolean notstring = false;
        
        boolean returnhasQ = dblqts.get(apiname);
        
        //  INITIAL INQUIRIES ESTABLISH BASIC TYPE AND LOCATION WITHIN THE STRING
  
        string trystring = jsonstring.remove('\\"');  
        // THIS REMOVES TEXT-BOUND DOUBLE QUOTES WHICH WOULD CAUSE ERRORS IN THESE PROBING QUERIES...
        
        if (!returnHasQ) {
            notlast = jsonstring.substringAfter('"' + apiname + '"').contains(',');
            notstring = true;
        }
        
        
        else {
            notlast = trystring.substringAfter('"' + apiname + '"').substringAfter('"').substringAfter('"').contains(',');
        }
        
        //  THESE DEBUGS PLACED IN ORDER TO TRACK EFFICACY OF THIS CODE BLOCK IN DEALING WITH NULL VALUES IN THE JSON RECORD
        //  RESULT IS THAT QUERIED VALUES THAT ARE NOT IN THE RECORD ULTIMATELY SHOW THEM AS NOTLAST == FALSE (I.E. LAST == TRUE)
        //  BUT, IN FACT, THEY ARE NOT THERE AT ALL, AND SINCE THE GOAL OF THE CONSTRUCTION IS TO RETURN THE CORRECT VALUE
        //  (WHERE THERE IS A VALUE TO RETURN);
        //  THE METHOD CONSTRUCTION STILL RETURNS AN EMPTY STRING...OKAY...GW JULY 2016
        
//        system.debug('jsonExtract : ' + jsonstring.substringAfter('"' + apiname + '"'));
//        system.debug('jsonExtract : ' + apiname + ' : ' + 'notLast=' + notlast + ' : ' + 'notString=' + notstring);
        
        if (notstring) {
            if (notlast) {
                fldval = jsonstring.substringAfter('"' + apiname + '":').substringBefore(',');             
            }
            
            else {
                fldval = jsonstring.substringAfter('"' + apiname + '":').substringBefore('}');
            }
        }
        
        else {  // GETS EVERYTHING ELSE
            
            if (notlast) {
                fldval = jsonstring.substringAfter('"' + apiname + '":"').substringBefore('",');
            }
            
            else  {          
                fldval = jsonstring.substringAfter('"' + apiname + '":"').substringBefore('"}'); 
            }
        }

        if (string.isblank(fldval)) {
            
            if (notlast) {
                fldval = jsonstring.substringAfter('"' + apiname + '":"').substringBefore('",');
            }
            
            else {
                fldval = jsonstring.substringAfter('"' + apiname + '":"').substringBefore('"}');
            }  
        }
         
        if (string.isblank(fldval)) {
            
            if (notlast) {
                fldval = jsonstring.substringAfter('"' + apiname + '":').substringBefore(',');
            }
            else {
                fldval = jsonstring.substringAfter('"' + apiname + '":').substringBefore('}');
            }
        }
   
        fldval = fldval.replace('\\','');      
        return fldval;
    }

    public boolean getFieldJsonProcess (string sObjName, string apiname) {
        
        system.debug('getFieldJSON...');

        boolean hasDblQts = true;
        
        schema.soapType[] eEnums = new schema.soapType[]{};
        
        string[] eStrings = new string[]{'boolean','double','integer'};

            for (string en : eStrings) {
                schema.SoapType matcher = matchThis(en);
                eEnums.add(matcher);
            }
        
        if (fsMap == null) {     

            Map<String, Schema.SObjectType> gd = Schema.getGlobalDescribe();
            Schema.DescribeSObjectResult r =  gd.get(sObjName).getDescribe();
            FsMap = r.fields.getMap();        

        }
     
        for (string fld : FsMap.keyset()) {
            
            if (fld == apiname) {
                
                Schema.DescribeFieldResult detail = FsMap.get(fld).getDescribe();
                
                for (schema.SoapType matcher : eEnums) {
                    if (matcher == detail.getSoapType()) {
                        
                        hasDblQts = false;
                    }
                }
            }
        }        
        
        return hasDblQts;
    }

    

    public map <string, boolean> getAllFieldsJsonProcess (string sObjName) {
        
        map <string, boolean> dblquotemap = new map <string, boolean>();
        
        system.debug('getFieldJSON...');

        schema.soapType[] eEnums = new schema.soapType[]{};
        
        string[] eStrings = new string[]{'boolean','double','integer'};

            for (string en : eStrings) {
                schema.SoapType matcher = matchThis(en);
                eEnums.add(matcher);
            }
        
        
        Map<String, Schema.SObjectType> gd = Schema.getGlobalDescribe();
        Schema.DescribeSObjectResult r =  gd.get(sObjName).getDescribe();
        FsMap = r.fields.getMap();        
        

        for (string fld : FsMap.keyset()) {
            
    //        system.debug('jsonEx...'  + fld);
 //           system.debug('jsonEx...'  + fsmap.get(fld));

            Schema.DescribeFieldResult detail = FsMap.get(fld).getDescribe();
            
            for (schema.SoapType matcher : eEnums) {
                if (matcher == detail.getSoapType()) {
                    dblquotemap.put(string.valueof(fsmap.get(fld)), false);
                }
                
                else {
                    dblquotemap.put(string.valueof(fsmap.get(fld)), true);
                }
            }

        }        
        
        return dblquotemap;
    }


    public static schema.SoapType matchThis (string match) {
        schema.SoapType matcher = Schema.SoapType.anyType;
        
        system.debug('matchThis!....');
        
        for (Schema.SoapType st : Schema.SoapType.values()) {
            if (st.name() == match) {
                matcher = st;
                break;
            }        
        }
        return matcher;
    }

}
